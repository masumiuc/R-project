names(lis1) <- list(1,3,4,"Masum", TRUE)
lis1
class(lis1)
is.list(lis1)
lis1[[3]]
lis1[[1:3]]
lis1[1:3]
str(lis1)
num <- 1:100
num
num <- 1:7
num
product <- c("Laptop", "Mobile", "WebCam")
l1 <- list(num,product)
l1
l1[1]
l1[[1]]
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
today()
now()
ymd()
ymd(2022-07-22)
ymd("2022-07-22")
mdy("2021-03-22")
mdy("January-03-22")
dmy(20210122)
dmy(030320)
file.create ("newfile.txt")
file.copy("newfile.txt", "google")
unlink("newfile.txt")
unlink("newfile.txt")
install.packages()
installed.packages()
library(class)
tidyverse_update()
update.packages()
?
data("ToothGrowth")
data("ToothGrowth")
View(ToothGrowth)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
filtered_tg <- filter(ToothGrowth, does==0.5)
rlang::last_trace()
filtered_tg <- filter.data.frame(ToothGrowth, does==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth,dose==0.5)
View(filtered_tg)
View(filtered_tg)
arrange(filtered_tg,len)
#same thing we will do by nested function # In programming NESTED describes code that performs a particular function and is contained within code that performs a broader function.
arrange(filter(ToothGrowth, dose==0.5)len)
#same thing we will do by nested function # In programming NESTED describes code that performs a particular function and is contained within code that performs a broader function.
arrange(filter(ToothGrowth, dose==0.5),len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
view(filtered_toothgrowth)
view(filtered_toothgrowth)
View(filtered_toothgrowth)
View(filtered_toothgrowth)
View(filtered_tg)
View(filtered_tg)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
filtered_toothgrowth
filtered_toothgrowth1 <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
View(filtered_toothgrowth)
filtered_toothgrowth1 <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
View(filtered_toothgrowth)
View(filtered_toothgrowth1)
filtered_toothgrowth1
filtered_toothgrowth
View(filtered_tg)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T))
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
summarise(mean_len=mean(len,na.rm = T))
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
filtered_toothgrowth
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
filtered_toothgrowth
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "keep")
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T),.groups = "drop")
View(filtered_toothgrowth)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_len=mean(len,na.rm = T))
View(filtered_toothgrowth)
#Code from ChatGPT
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
arrange(supp)
result
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
result
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
#Code from ChatGPT I asked (if I exclude the line (,.groups = "drop") from my command it results same with or without this line)
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
View(result)
#Code from ChatGPT I asked (if I exclude the line (,.groups = "drop") from my command it results same with or without this line)
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
arrange(supp)
View(result)
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T)) %>%
group_by(supp)
View(result)
result <- ToothGrowth %>%
filter(dose == 0.5) %>%
group_by(supp) %>%
summarise(mean_len = mean(len, na.rm = T))
View(result)
er(1) <- c(1,2,3)
er(1)
View(er(1))
er(1) <- c(1,2,3)
data(dimonds)
install.packages("tidyverse")
library(tidyverse)
data("diamonds")
View(diamonds)
head(diamonds)
# we could use the structure function str() to highlight the structure of this data frame.
str(diamonds)
colnames(diamonds)
mutate(diamonds, carat_2= carat*100)
Wherever data comes from, you will almost always want to store it in a data frame object to work with it. Now, you can start creating and exploring data frames with the code chunks in the RMD space. To interact with the code chunk, click the green arrow in the top-right corner of the chunk. The executed code will appear in the RMD space and your console.
mutate(diamonds, carat_2= carat*100)
data("diamonds")
library(tidyverse)
data("diamonds")
mutate(diamonds, carat_2= carat*100)
as_tibble(dimonds)
library(tidyverse)
data("diamonds")
as_tibble(diamonds)
data()
data("mtcars")
mtcars
View(mtcars)
readr_example()
library(tidyr)
readr_example()
readr_example()
library(tidyverse)
readr_example()
readr_example("mtcars.csv")
read.csv(readr_example("mtcars.csv"))
readr_example("mtcars.csv")
read.csv(readr_example("mtcars.csv"))
spec("mtcars.csv")
spec(mtcars.csv)
spec()
spec(mtcars)
spec("mtcars")
read.csv(readr_example("mtcars.csv"))
summary(mtcars)
glimpse(mtcars)
library(readxl)
readxl_example()
read_excel(readxl_example(type-me.xlsx))
read_excel(readxl_example("type-me.xlsx"))
excel_sheets(readxl_example("type-me.xlsx"))
excel_sheets(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
excel_sheets(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
excel_sheets(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
read_excel(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
str(mtcars)
glimpse(mtcars)
library(tidyverse)
glimpse(mtcars)
View(diamonds)
#Cleaning up with the basics
install.packages("here")
library(here)
install.packages("skimr")
library(skimr)
install.packages("janitor")
library(janitor)
install.packages("tidyr")
library(tidyr)
install.packages("palmerpenguins")
library("palmerpenguins")
# try with some clean function skim_without_chart(), glimpse(, head(), select()
skim_without_charts(penguins)
head(penguins)
# select() function need dplyr package installed
install.packages("dplyr")
library(dplyr)
penguins %>%
select(species)
#if we need every column except species
penguins %>%
select(-species)
#to rename column in data frame
penguins %>%
rename(island_new = island)
# Similar to the rename function, the rename_with() function can change column names to be more consistent. For example, maybe we want all of our column names to be in uppercase. We can use the rename_with() function to do that. This will automatically make our column names uppercase. But since variable names are usually lowercase, we'll use the "To lower" option to change it
penguins %>%
rename_with(toupper)
#we can write another way
rename_with(penguins, tolower)
# clean_names() function  in janitor package
clean_names(penguins)
#When you import data from various sources or merge multiple data sets, column names can sometimes be inconsistent, containing spaces, special characters, capital letters, or other non-standard elements. Such messy column names can be challenging to work with and may lead to errors in your analysis. The clean_names() function helps address these issues by performing the following transformations on column names
ok
install.packages("dplyr")
library(dplyr)
str(penguins)
str("penguins")
install.packages("palmerpenguins")
library(palmerpenguins)
str(penguins)
skim_without_charts(penguins)
skim_without_charts(penguins)
library(tidyr)
skim_without_charts(penguins)
library(tidyverse)
skim_without_charts(penguins)
head(penguins)
skim_without_charts(penguins)
skim_without_charts("penguins")
skim_without_charts()
skim_without_charts(penguins)
library(skimr)
skim_without_charts(penguins) # this function needs skimr package installed
x+y
x <- 2
y <- 7
y <- 7
#Arithmetic operator
x <- 2
x+y
x-y
x*y
x/y
y/x
y%%x
y%/%x
y^x
x^x
x^y
x<y
x>y
x<=y
x=<y
x<=2
x==2
y==7
x==y
x!=y
x!=2
x > 1 & x < 5
x > 2 & x < 1
x > 1 | x < 2
x <- c(2, 3, 4, 5, 6)
x <- c(3, 5, 7)
y <- c(2, 4, 6)
x < 5 & y < 5
x < 5 && y < 5
x <- c(3, 5, 7)
y <- c(2, 4, 6)
x < 5 && y < 5
View(penguins)
install.packages(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
View(penguins)
str(penguins)
library(skmir)
install.packages("skimr")
library(skmir)
library(skimr)
skim_without_charts(penguins)
tibble(penguins)
library(tidyr)
tibble(penguins)
head(penguins)
install.packages("janitor")
library(janitor)
clean_names(penguins)
Penguins %>%
arrange(bill_length_mm)
Penguins %>%
arrange(bill_length_mm)
Penguins %>% arrange(bill_length_mm)
library(tidyverse)
Penguins %>% arrange(bill_length_mm)
library(palmerpenguins)
Penguins %>% arrange(bill_length_mm)
str(penguins)
Penguins %>% arrange(bill_length_mm)
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
Penguins %>% arrange(bill_length_mm)
# We can use the arrange function to choose which variable we want to sort by, first wen need to install tidyverse package
install.packages("tidyverse")
library(tidyverse)
Penguins %>% arrange(bill_length_mm)
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
Penguins %>% arrange(bill_length_mm)
data("penguins")
Penguins %>% arrange(bill_length_mm)
data("penguins")
Penguins %>% arrange(bill_length_mm)
Penguins %>% arrange(bill_length_mm)
penguins
penguins %>% arrange(bill_length_mm)
Penguins %>% arrange(bill_length_mm)
penguins %>% arrange(bill_length_mm)
str(penguins)
Penguins %>% arrange(bill_length_mm)
penguins %>% arrange(bill_length_mm)
penguins %>%  -arrange(bill_length_mm)
penguins %>%  -arrange(bill_length_mm)
penguins %>%  -arrange(bill_length_mm)
penguins %>%  -arrange(bill_length_mm)
penguins %>%  arrange(-bill_length_mm)
penguins2 <- penguins %>% arrange(-bill_length_mm)
data("penguins2")
View(penguins2)
penguins2 <- penguins %>% arrange(-bill_length_mm)
data("penguins2")
View("penguins2")
View(penguins2)
View(penguins2)
skim_without_charts(penguins2)
library(skmir)
install.packages("skmir")
library(skmir)
install.packages("skimr")
install.packages("skimr")
library(skimr)
skim_without_charts(penguins2)
head(penguins2
)
head(penguins2)
penguins %>% group_by(island) %>% drop_na() %>% summarise(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island) %>% summarise(mean_bill_length_mm = mean(bill_length_mm))
%>% drop_na()
penguins %>% group_by(island) %>% drop_na() %>% summarise(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island, species) %>% drop_na() %>% summarise(max_b = max(bill_length_mm, mean_b = mean(bill_length_mm)))
penguins %>% group_by(island) %>% drop_na() %>% summarise(max_b = max(bill_length_mm))
penguins %>% filter(species == "Adelie")
booking_df <- read.csv("projects/Course 7/Week 3/hotel_bookings.csv")
booking_df <- read.csv("projects/Course 7/Week 3hotel_bookings.csv")
library(readr)
booking_df <- read.csv("projects/Course 7/Week 3/hotel_bookings.csv")
install.packages("readr")
install.packages("readr")
library(readr)
booking_df <- read.csv("projects/Course 7/Week 3/hotel_bookings.csv")
library(readr)
hotel_bookings <- read_csv("project/project/hotel_bookings.csv")
View(hotel_bookings)
View(hotel_bookings)
data("hotel_bookings")
data(hotel_bookings)
data(hotel_bookings)
read.csv("hotel_bookings.csv")
library(readr)
str(hotel_bookings)
head(hotel_bookings)
skim_without_charts(hotel_bookings)
library(skimr)
skim_without_charts(hotel_bookings)
clean_names(hotel_bookings)
library(janitor)
clean_names(hotel_bookings)
glimpse(hotel_bookings)
library(tidyverse)
glimpse(hotel_bookings)
library(janitor)
library(skimr)
colnames(hotel_bookings)
skim_without_charts(hotel_bookings)
View(hotel_bookings)
library(tidyverse)
library(skimr)
library(janitor)
skim_without_charts(hotel_bookings)
View(hotel_bookings)
count.fields(hotel)
colnames(hotel_bookings)
hotel_count <- nrow(unique(df$"hotel"))
hotel_count <- nrow(unique(df$hotel))
print(hotrel_count)
hotel_count <- nrow(unique(df$[["hotel"]]))
# Assuming the dataset is in a data frame named df
hotel_count <- nrow(unique(df[["hotel"]]))
print(hotel_count)
str(hotel_count
)
str(hotel_bookings)
hotel_bookings %>% unique(hotel)
hotel_bookings %>% unique(hotel_num = hotel)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
unique.rows <- df %>%
select(hotel) %>%
n_distinct()
unique.rows <- df %>%
select(hotel) %>%
n_distinct()
print(unique.rows)
unique_rows <- df %>%
select(hotel) %>%
n_distinct()
unique_rows <- df %>%
select(hotel_bookings) %>%
n_distinct()
print(unique_rows)
unique_rows <- hotel_bookings %>%
select(hotel) %>%
n_distinct()
print(unique_rows)
unique_rows <- hotel_bookings %>%
select(hotel) %>%
n_distinct() %>%
group_by(hotel)
unique_rows <- hotel_bookings %>%
select(hotel) %>%
n_distinct() %>%
group_by(hotel)
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(mean_adult = mean(adults))
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(num_adult = n())
sum(hotel_bookings$adults)
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(num_adult = n(adults))
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(sum_adult = sum(hotel))
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(sum_adult = sum(adult))
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(sum_adult = sum(adult))
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(sum_adult = sum(adults))
146829+74798
sum(hotel_bookings$adults)
any(is.na(hotel_bookings$hotel))
data("hotel_bookings")
data("penguins")
library(palmerpenguins)
data("penguins")
data("hotel_bookings")
sum(hotel_bookings$babies)
hotel_bookings %>% group_by(hotel) %>% summarise(sum_babies = sum(babies))
hotel_bookings %>% group_by(hotel) %>% summarise(sum_infent = sum(infert))
hotel_bookings %>% group_by(hotel) %>% summarise(sum_children = sum(children))
sum(hotel_bookings$children)
sum(hotel_bookings$children)
sum(hotel_bookings$children)
library(janitor)
glimpse(hotel_bookings)
hotel_bookings %>% group_by(hotel) %>% drop_na() %>% summarise(sum_children = sum(children))
sum(hotel_bookings$children, drop_na())
hotel_bookings %>% drop_na() %>% sum(children)
hotel_bookings %>% drop_na() %>% summarise(sum(children))
